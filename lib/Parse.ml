(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_c"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "imm_tok_lpar", None;
  "ms_restrict_modifier", None;
  "primitive_type", None;
  "null", None;
  "type_qualifier",
  Some (
    Alt [|
      Token (Literal "const");
      Token (Literal "volatile");
      Token (Literal "restrict");
      Token (Literal "_Atomic");
    |];
  );
  "system_lib_string", None;
  "number_literal", None;
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Token (Literal ";");
    ];
  );
  "preproc_directive", None;
  "storage_class_specifier",
  Some (
    Alt [|
      Token (Literal "extern");
      Token (Literal "static");
      Token (Literal "auto");
      Token (Literal "register");
      Token (Literal "inline");
    |];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Token (Literal ";");
    ];
  );
  "pat_bfeb4bb", None;
  "ms_signed_ptr_modifier", None;
  "escape_sequence", None;
  "false", None;
  "imm_tok_pat_36637e2", None;
  "pat_25b90ba", None;
  "identifier", None;
  "preproc_arg", None;
  "true", None;
  "ms_unaligned_ptr_modifier",
  Some (
    Alt [|
      Token (Literal "_unaligned");
      Token (Literal "__unaligned");
    |];
  );
  "pat_c46d1b2", None;
  "pat_56631e5", None;
  "ms_call_modifier",
  Some (
    Alt [|
      Token (Literal "__cdecl");
      Token (Literal "__clrcall");
      Token (Literal "__stdcall");
      Token (Literal "__fastcall");
      Token (Literal "__thiscall");
      Token (Literal "__vectorcall");
    |];
  );
  "ms_unsigned_ptr_modifier", None;
  "pat_3df6e71", None;
  "pat_c3ea183", None;
  "pat_ca8830e", None;
  "pat_9d92f6a", None;
  "imm_tok_prec_p1_pat_c7f65b4", None;
  "char_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "L'");
        Token (Literal "u'");
        Token (Literal "U'");
        Token (Literal "u8'");
        Token (Literal "'");
      |];
      Alt [|
        Token (Name "escape_sequence");
        Token (Name "imm_tok_pat_36637e2");
      |];
      Token (Literal "'");
    ];
  );
  "field_designator",
  Some (
    Seq [
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "ms_declspec_modifier",
  Some (
    Seq [
      Token (Literal "__declspec");
      Token (Literal "(");
      Token (Name "identifier");
      Token (Literal ")");
    ];
  );
  "goto_statement",
  Some (
    Seq [
      Token (Literal "goto");
      Token (Name "identifier");
      Token (Literal ";");
    ];
  );
  "sized_type_specifier",
  Some (
    Seq [
      Repeat1 (
        Alt [|
          Token (Literal "signed");
          Token (Literal "unsigned");
          Token (Literal "long");
          Token (Literal "short");
        |];
      );
      Opt (
        Alt [|
          Token (Name "identifier");
          Token (Name "primitive_type");
        |];
      );
    ];
  );
  "preproc_params",
  Some (
    Seq [
      Token (Name "imm_tok_lpar");
      Opt (
        Seq [
          Alt [|
            Token (Name "identifier");
            Token (Literal "...");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "identifier");
                Token (Literal "...");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "preproc_defined",
  Some (
    Alt [|
      Seq [
        Token (Literal "defined");
        Token (Literal "(");
        Token (Name "identifier");
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "defined");
        Token (Name "identifier");
      ];
    |];
  );
  "preproc_call",
  Some (
    Seq [
      Token (Name "preproc_directive");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Literal "\n");
    ];
  );
  "ms_pointer_modifier",
  Some (
    Alt [|
      Token (Name "ms_unaligned_ptr_modifier");
      Token (Name "ms_restrict_modifier");
      Token (Name "ms_unsigned_ptr_modifier");
      Token (Name "ms_signed_ptr_modifier");
    |];
  );
  "preproc_def",
  Some (
    Seq [
      Token (Name "pat_c3ea183");
      Token (Name "identifier");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Literal "\n");
    ];
  );
  "string_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "L\"");
        Token (Literal "u\"");
        Token (Literal "U\"");
        Token (Literal "u8\"");
        Token (Literal "\"");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_prec_p1_pat_c7f65b4");
          Token (Name "escape_sequence");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "preproc_function_def",
  Some (
    Seq [
      Token (Name "pat_c3ea183");
      Token (Name "identifier");
      Token (Name "preproc_params");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Literal "\n");
    ];
  );
  "preproc_argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "preproc_expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "preproc_expression");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "preproc_binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "+");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "-");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "*");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "/");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "%");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "||");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "&&");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "|");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "^");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "&");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "==");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "!=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<<");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">>");
        Token (Name "preproc_expression");
      ];
    |];
  );
  "preproc_call_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "preproc_argument_list");
    ];
  );
  "preproc_expression",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "preproc_call_expression");
      Token (Name "number_literal");
      Token (Name "char_literal");
      Token (Name "preproc_defined");
      Token (Name "preproc_unary_expression");
      Token (Name "preproc_binary_expression");
      Token (Name "preproc_parenthesized_expression");
    |];
  );
  "preproc_parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "preproc_expression");
      Token (Literal ")");
    ];
  );
  "preproc_unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "~");
        Token (Literal "-");
        Token (Literal "+");
      |];
      Token (Name "preproc_expression");
    ];
  );
  "concatenated_string",
  Some (
    Seq [
      Token (Name "string_literal");
      Repeat1 (
        Token (Name "string_literal");
      );
    ];
  );
  "preproc_include",
  Some (
    Seq [
      Token (Name "pat_ca8830e");
      Alt [|
        Token (Name "string_literal");
        Token (Name "system_lib_string");
        Token (Name "identifier");
        Token (Name "preproc_call_expression");
      |];
      Token (Literal "\n");
    ];
  );
  "abstract_array_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "abstract_declarator");
      );
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "abstract_declarator",
  Some (
    Alt [|
      Token (Name "abstract_pointer_declarator");
      Token (Name "abstract_function_declarator");
      Token (Name "abstract_array_declarator");
      Token (Name "abstract_parenthesized_declarator");
    |];
  );
  "abstract_function_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "abstract_declarator");
      );
      Token (Name "parameter_list");
    ];
  );
  "abstract_parenthesized_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "abstract_declarator");
      Token (Literal ")");
    ];
  );
  "abstract_pointer_declarator",
  Some (
    Seq [
      Token (Literal "*");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Token (Name "abstract_declarator");
      );
    ];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "array_field_declarator",
  Some (
    Seq [
      Token (Name "field_declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "call_expression");
        Token (Name "field_expression");
        Token (Name "pointer_expression");
        Token (Name "subscript_expression");
        Token (Name "parenthesized_expression");
      |];
      Alt [|
        Token (Literal "=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal "&=");
        Token (Literal "^=");
        Token (Literal "|=");
      |];
      Token (Name "expression");
    ];
  );
  "attribute_specifier",
  Some (
    Seq [
      Token (Literal "__attribute__");
      Token (Literal "(");
      Token (Name "argument_list");
      Token (Literal ")");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
    |];
  );
  "bitfield_clause",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "call_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "argument_list");
    ];
  );
  "cast_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ")");
      Token (Name "expression");
    ];
  );
  "comma_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ",");
      Alt [|
        Token (Name "expression");
        Token (Name "comma_expression");
      |];
    ];
  );
  "compound_literal_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ")");
      Token (Name "initializer_list");
    ];
  );
  "conditional_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "declaration_specifiers",
  Some (
    Seq [
      Repeat (
        Alt [|
          Token (Name "storage_class_specifier");
          Token (Name "type_qualifier");
          Token (Name "attribute_specifier");
          Token (Name "ms_declspec_modifier");
        |];
      );
      Token (Name "type_specifier");
      Repeat (
        Alt [|
          Token (Name "storage_class_specifier");
          Token (Name "type_qualifier");
          Token (Name "attribute_specifier");
          Token (Name "ms_declspec_modifier");
        |];
      );
    ];
  );
  "declarator",
  Some (
    Alt [|
      Token (Name "pointer_declarator");
      Token (Name "function_declarator");
      Token (Name "array_declarator");
      Token (Name "parenthesized_declarator");
      Token (Name "identifier");
    |];
  );
  "enum_specifier",
  Some (
    Seq [
      Token (Literal "enum");
      Alt [|
        Seq [
          Token (Name "identifier");
          Opt (
            Token (Name "enumerator_list");
          );
        ];
        Token (Name "enumerator_list");
      |];
    ];
  );
  "enumerator",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "enumerator_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "enumerator");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "enumerator");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "conditional_expression");
      Token (Name "assignment_expression");
      Token (Name "binary_expression");
      Token (Name "unary_expression");
      Token (Name "update_expression");
      Token (Name "cast_expression");
      Token (Name "pointer_expression");
      Token (Name "sizeof_expression");
      Token (Name "subscript_expression");
      Token (Name "call_expression");
      Token (Name "field_expression");
      Token (Name "compound_literal_expression");
      Token (Name "identifier");
      Token (Name "number_literal");
      Token (Name "string_literal");
      Token (Name "true");
      Token (Name "false");
      Token (Name "null");
      Token (Name "concatenated_string");
      Token (Name "char_literal");
      Token (Name "parenthesized_expression");
    |];
  );
  "field_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Opt (
        Seq [
          Token (Name "field_declarator");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "field_declarator");
            ];
          );
        ];
      );
      Opt (
        Token (Name "bitfield_clause");
      );
      Token (Literal ";");
    ];
  );
  "field_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Token (Literal "}");
    ];
  );
  "field_declaration_list_item",
  Some (
    Alt [|
      Token (Name "field_declaration");
      Token (Name "preproc_def");
      Token (Name "preproc_function_def");
      Token (Name "preproc_call");
      Token (Name "preproc_if_in_field_declaration_list");
      Token (Name "preproc_ifdef_in_field_declaration_list");
    |];
  );
  "field_declarator",
  Some (
    Alt [|
      Token (Name "pointer_field_declarator");
      Token (Name "function_field_declarator");
      Token (Name "array_field_declarator");
      Token (Name "parenthesized_field_declarator");
      Token (Name "identifier");
    |];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal ".");
        Token (Literal "->");
      |];
      Token (Name "identifier");
    ];
  );
  "function_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Token (Name "parameter_list");
      Repeat (
        Token (Name "attribute_specifier");
      );
    ];
  );
  "function_field_declarator",
  Some (
    Seq [
      Token (Name "field_declarator");
      Token (Name "parameter_list");
    ];
  );
  "initializer_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "initializer_pair");
            Token (Name "expression");
            Token (Name "initializer_list");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "initializer_pair");
                Token (Name "expression");
                Token (Name "initializer_list");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "initializer_pair",
  Some (
    Seq [
      Repeat1 (
        Alt [|
          Token (Name "subscript_designator");
          Token (Name "field_designator");
        |];
      );
      Token (Literal "=");
      Alt [|
        Token (Name "expression");
        Token (Name "initializer_list");
      |];
    ];
  );
  "macro_type_specifier",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ")");
    ];
  );
  "ms_based_modifier",
  Some (
    Seq [
      Token (Literal "__based");
      Token (Name "argument_list");
    ];
  );
  "parameter_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Opt (
        Alt [|
          Token (Name "declarator");
          Token (Name "abstract_declarator");
        |];
      );
    ];
  );
  "parameter_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "parameter_declaration");
            Token (Literal "...");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "parameter_declaration");
                Token (Literal "...");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "parenthesized_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "declarator");
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "expression");
        Token (Name "comma_expression");
      |];
      Token (Literal ")");
    ];
  );
  "parenthesized_field_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "field_declarator");
      Token (Literal ")");
    ];
  );
  "pointer_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "declarator");
    ];
  );
  "pointer_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "*");
        Token (Literal "&");
      |];
      Token (Name "expression");
    ];
  );
  "pointer_field_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "field_declarator");
    ];
  );
  "preproc_elif_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
    ];
  );
  "preproc_else_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
    ];
  );
  "preproc_if_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef_in_field_declaration_list",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "sizeof_expression",
  Some (
    Seq [
      Token (Literal "sizeof");
      Alt [|
        Token (Name "expression");
        Seq [
          Token (Literal "(");
          Token (Name "type_descriptor");
          Token (Literal ")");
        ];
      |];
    ];
  );
  "struct_specifier",
  Some (
    Seq [
      Token (Literal "struct");
      Opt (
        Token (Name "ms_declspec_modifier");
      );
      Alt [|
        Seq [
          Token (Name "identifier");
          Opt (
            Token (Name "field_declaration_list");
          );
        ];
        Token (Name "field_declaration_list");
      |];
    ];
  );
  "subscript_designator",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "type_descriptor",
  Some (
    Seq [
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_specifier");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Token (Name "abstract_declarator");
      );
    ];
  );
  "type_specifier",
  Some (
    Alt [|
      Token (Name "struct_specifier");
      Token (Name "union_specifier");
      Token (Name "enum_specifier");
      Token (Name "macro_type_specifier");
      Token (Name "sized_type_specifier");
      Token (Name "primitive_type");
      Token (Name "identifier");
    |];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "~");
        Token (Literal "-");
        Token (Literal "+");
      |];
      Token (Name "expression");
    ];
  );
  "union_specifier",
  Some (
    Seq [
      Token (Literal "union");
      Opt (
        Token (Name "ms_declspec_modifier");
      );
      Alt [|
        Seq [
          Token (Name "identifier");
          Opt (
            Token (Name "field_declaration_list");
          );
        ];
        Token (Name "field_declaration_list");
      |];
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "--");
          Token (Literal "++");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "--");
          Token (Literal "++");
        |];
      ];
    |];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
      Token (Literal ";");
    ];
  );
  "expression_statement",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
      Token (Literal ";");
    ];
  );
  "array_type_declarator",
  Some (
    Seq [
      Token (Name "type_declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "function_type_declarator",
  Some (
    Seq [
      Token (Name "type_declarator");
      Token (Name "parameter_list");
    ];
  );
  "parenthesized_type_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_declarator");
      Token (Literal ")");
    ];
  );
  "pointer_type_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_declarator");
    ];
  );
  "type_declarator",
  Some (
    Alt [|
      Token (Name "pointer_type_declarator");
      Token (Name "function_type_declarator");
      Token (Name "array_type_declarator");
      Token (Name "parenthesized_type_declarator");
      Token (Name "identifier");
    |];
  );
  "init_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Token (Literal "=");
      Alt [|
        Token (Name "initializer_list");
        Token (Name "expression");
      |];
    ];
  );
  "empty_declaration",
  Some (
    Seq [
      Token (Name "type_specifier");
      Token (Literal ";");
    ];
  );
  "type_definition",
  Some (
    Seq [
      Token (Literal "typedef");
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_specifier");
      Token (Name "type_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_declarator");
        ];
      );
      Token (Literal ";");
    ];
  );
  "declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Alt [|
        Token (Name "declarator");
        Token (Name "init_declarator");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "declarator");
            Token (Name "init_declarator");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "case_statement",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "case");
          Token (Name "expression");
        ];
        Token (Literal "default");
      |];
      Token (Literal ":");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
          |];
          Token (Name "declaration");
          Token (Name "type_definition");
        |];
      );
    ];
  );
  "compound_statement",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
      Token (Literal "}");
    ];
  );
  "declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
      Token (Literal "}");
    ];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Token (Name "labeled_statement");
          Token (Name "compound_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "do_statement");
          Token (Name "while_statement");
          Token (Name "for_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "goto_statement");
        |];
      |];
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Token (Literal ";");
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Alt [|
        Token (Name "declaration");
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "comma_expression");
            |];
          );
          Token (Literal ";");
        ];
      |];
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
      Token (Literal ")");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Token (Name "labeled_statement");
          Token (Name "compound_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "do_statement");
          Token (Name "while_statement");
          Token (Name "for_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "goto_statement");
        |];
      |];
    ];
  );
  "function_definition",
  Some (
    Seq [
      Opt (
        Token (Name "ms_call_modifier");
      );
      Token (Name "declaration_specifiers");
      Token (Name "declarator");
      Token (Name "compound_statement");
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Token (Name "labeled_statement");
          Token (Name "compound_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "do_statement");
          Token (Name "while_statement");
          Token (Name "for_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "goto_statement");
        |];
      |];
      Opt (
        Seq [
          Token (Literal "else");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
        ];
      );
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Token (Name "labeled_statement");
          Token (Name "compound_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "do_statement");
          Token (Name "while_statement");
          Token (Name "for_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "goto_statement");
        |];
      |];
    ];
  );
  "linkage_specification",
  Some (
    Seq [
      Token (Literal "extern");
      Token (Name "string_literal");
      Alt [|
        Token (Name "function_definition");
        Token (Name "declaration");
        Token (Name "declaration_list");
      |];
    ];
  );
  "preproc_elif",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
    ];
  );
  "preproc_else",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
    ];
  );
  "preproc_if",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Token (Name "case_statement");
            Alt [|
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
            |];
          |];
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "parenthesized_expression");
      Token (Name "compound_statement");
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Token (Name "labeled_statement");
          Token (Name "compound_statement");
          Token (Name "expression_statement");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "do_statement");
          Token (Name "while_statement");
          Token (Name "for_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "goto_statement");
        |];
      |];
    ];
  );
  "translation_unit",
  Some (
    Repeat (
      Alt [|
        Token (Name "function_definition");
        Token (Name "linkage_specification");
        Token (Name "declaration");
        Alt [|
          Token (Name "case_statement");
          Alt [|
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
          |];
        |];
        Token (Name "type_definition");
        Token (Name "empty_declaration");
        Token (Name "preproc_if");
        Token (Name "preproc_ifdef");
        Token (Name "preproc_include");
        Token (Name "preproc_def");
        Token (Name "preproc_function_def");
        Token (Name "preproc_call");
      |];
    );
  );
]

let trans_imm_tok_lpar ((kind, body) : mt) : CST.imm_tok_lpar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_restrict_modifier ((kind, body) : mt) : CST.ms_restrict_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_primitive_type ((kind, body) : mt) : CST.primitive_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_type_qualifier ((kind, body) : mt) : CST.type_qualifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Const (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Vola (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Rest (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `X__Atomic (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_system_lib_string ((kind, body) : mt) : CST.system_lib_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number_literal ((kind, body) : mt) : CST.number_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_directive ((kind, body) : mt) : CST.preproc_directive =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_storage_class_specifier ((kind, body) : mt) : CST.storage_class_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Extern (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Static (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Auto (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Regi (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Inline (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_bfeb4bb ((kind, body) : mt) : CST.pat_bfeb4bb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_signed_ptr_modifier ((kind, body) : mt) : CST.ms_signed_ptr_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_36637e2 ((kind, body) : mt) : CST.imm_tok_pat_36637e2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_25b90ba ((kind, body) : mt) : CST.pat_25b90ba =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_preproc_arg ((kind, body) : mt) : CST.preproc_arg =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_ms_unaligned_ptr_modifier ((kind, body) : mt) : CST.ms_unaligned_ptr_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `X__unal (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `X___unal (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_c46d1b2 ((kind, body) : mt) : CST.pat_c46d1b2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_56631e5 ((kind, body) : mt) : CST.pat_56631e5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_call_modifier ((kind, body) : mt) : CST.ms_call_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `X___cdecl (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `X___clrc (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `X___stdc (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `X___fast (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `X___this (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `X___vect (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ms_unsigned_ptr_modifier ((kind, body) : mt) : CST.ms_unsigned_ptr_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3df6e71 ((kind, body) : mt) : CST.pat_3df6e71 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c3ea183 ((kind, body) : mt) : CST.pat_c3ea183 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ca8830e ((kind, body) : mt) : CST.pat_ca8830e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9d92f6a ((kind, body) : mt) : CST.pat_9d92f6a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_c7f65b4 ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_c7f65b4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_char_literal ((kind, body) : mt) : CST.char_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LSQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `USQUOT_d861d39 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `USQUOT_2701bdc (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `U8SQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Esc_seq (
                  trans_escape_sequence (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Imm_tok_pat_36637e2 (
                  trans_imm_tok_pat_36637e2 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_designator ((kind, body) : mt) : CST.field_designator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_ms_declspec_modifier ((kind, body) : mt) : CST.ms_declspec_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_goto_statement ((kind, body) : mt) : CST.goto_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sized_type_specifier ((kind, body) : mt) : CST.sized_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Signed (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Unsi (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Long (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Short (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prim_type (
                      trans_primitive_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_preproc_params ((kind, body) : mt) : CST.preproc_params =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_imm_tok_lpar (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `DOTDOTDOT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `DOTDOTDOT (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_preproc_defined ((kind, body) : mt) : CST.preproc_defined =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Defi_LPAR_id_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Defi_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_identifier (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_call ((kind, body) : mt) : CST.preproc_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_preproc_directive (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ms_pointer_modifier ((kind, body) : mt) : CST.ms_pointer_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ms_unal_ptr_modi (
            trans_ms_unaligned_ptr_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ms_rest_modi (
            trans_ms_restrict_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Ms_unsi_ptr_modi (
            trans_ms_unsigned_ptr_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Ms_signed_ptr_modi (
            trans_ms_signed_ptr_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_def ((kind, body) : mt) : CST.preproc_def =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_c3ea183 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `UDQUOT_c163aae (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `UDQUOT_df3447d (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `U8DQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `DQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_prec_p1_pat_c7f65b4 (
                      trans_imm_tok_prec_p1_pat_c7f65b4 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_function_def ((kind, body) : mt) : CST.preproc_function_def =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_c3ea183 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            trans_preproc_params (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_preproc_argument_list ((kind, body) : mt) : CST.preproc_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_preproc_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_preproc_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_binary_expression ((kind, body) : mt) : CST.preproc_binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prep_exp_PLUS_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Prep_exp_DASH_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Prep_exp_STAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Prep_exp_SLASH_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Prep_exp_PERC_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Prep_exp_BARBAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Prep_exp_AMPAMP_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Prep_exp_BAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Prep_exp_HAT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Prep_exp_AMP_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Prep_exp_EQEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Prep_exp_BANGEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Prep_exp_GT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Prep_exp_GTEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Prep_exp_LTEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Prep_exp_LT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Prep_exp_LTLT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Prep_exp_GTGT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_call_expression ((kind, body) : mt) : CST.preproc_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_preproc_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_expression ((kind, body) : mt) : CST.preproc_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prep_call_exp (
            trans_preproc_call_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Num_lit (
            trans_number_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Char_lit (
            trans_char_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prep_defi (
            trans_preproc_defined (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prep_un_exp (
            trans_preproc_unary_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Prep_bin_exp (
            trans_preproc_binary_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Prep_paren_exp (
            trans_preproc_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_parenthesized_expression ((kind, body) : mt) : CST.preproc_parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_unary_expression ((kind, body) : mt) : CST.preproc_unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_preproc_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_concatenated_string ((kind, body) : mt) : CST.concatenated_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_string_literal (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_string_literal (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_include ((kind, body) : mt) : CST.preproc_include =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_ca8830e (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `System_lib_str (
                  trans_system_lib_string (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Prep_call_exp (
                  trans_preproc_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_abstract_array_declarator ((kind, body) : mt) : CST.abstract_array_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_declarator ((kind, body) : mt) : CST.abstract_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Abst_poin_decl (
            trans_abstract_pointer_declarator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Abst_func_decl (
            trans_abstract_function_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Abst_array_decl (
            trans_abstract_array_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Abst_paren_decl (
            trans_abstract_parenthesized_declarator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_function_declarator ((kind, body) : mt) : CST.abstract_function_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v0
            ,
            trans_parameter_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_parenthesized_declarator ((kind, body) : mt) : CST.abstract_parenthesized_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_abstract_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_pointer_declarator ((kind, body) : mt) : CST.abstract_pointer_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_declarator ((kind, body) : mt) : CST.array_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_field_declarator ((kind, body) : mt) : CST.array_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_field_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Field_exp (
                  trans_field_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Poin_exp (
                  trans_pointer_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_specifier ((kind, body) : mt) : CST.attribute_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_argument_list (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bitfield_clause ((kind, body) : mt) : CST.bitfield_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_expression ((kind, body) : mt) : CST.cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_descriptor (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_comma_expression ((kind, body) : mt) : CST.comma_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comma_exp (
                  trans_comma_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_literal_expression ((kind, body) : mt) : CST.compound_literal_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_descriptor (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_initializer_list (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional_expression ((kind, body) : mt) : CST.conditional_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_specifiers ((kind, body) : mt) : CST.declaration_specifiers =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Stor_class_spec (
                      trans_storage_class_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_qual (
                      trans_type_qualifier (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Attr_spec (
                      trans_attribute_specifier (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Ms_decl_modi (
                      trans_ms_declspec_modifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_type_specifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Stor_class_spec (
                      trans_storage_class_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_qual (
                      trans_type_qualifier (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Attr_spec (
                      trans_attribute_specifier (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Ms_decl_modi (
                      trans_ms_declspec_modifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declarator ((kind, body) : mt) : CST.declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Poin_decl (
            trans_pointer_declarator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_decl (
            trans_function_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Array_decl (
            trans_array_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Paren_decl (
            trans_parenthesized_declarator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_specifier ((kind, body) : mt) : CST.enum_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id_opt_enum_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_enumerator_list (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Enum_list (
                  trans_enumerator_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enumerator ((kind, body) : mt) : CST.enumerator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enumerator_list ((kind, body) : mt) : CST.enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_enumerator (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cond_exp (
            trans_conditional_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Update_exp (
            trans_update_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Cast_exp (
            trans_cast_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Poin_exp (
            trans_pointer_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Sizeof_exp (
            trans_sizeof_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Subs_exp (
            trans_subscript_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Field_exp (
            trans_field_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Comp_lit_exp (
            trans_compound_literal_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Num_lit (
            trans_number_literal (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Null (
            trans_null (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Conc_str (
            trans_concatenated_string (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Char_lit (
            trans_char_literal (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_field_declarator (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_field_declarator (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_bitfield_clause (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list ((kind, body) : mt) : CST.field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list_item ((kind, body) : mt) : CST.field_declaration_list_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Field_decl (
            trans_field_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prep_def (
            trans_preproc_def (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prep_func_def (
            trans_preproc_function_def (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Prep_call (
            trans_preproc_call (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prep_if_in_field_decl_list (
            trans_preproc_if_in_field_declaration_list (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prep_ifdef_in_field_decl_list (
            trans_preproc_ifdef_in_field_declaration_list (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declarator ((kind, body) : mt) : CST.field_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Poin_field_decl (
            trans_pointer_field_declarator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_field_decl (
            trans_function_field_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Array_field_decl (
            trans_array_field_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Paren_field_decl (
            trans_parenthesized_field_declarator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declarator ((kind, body) : mt) : CST.function_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_declarator (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute_specifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_field_declarator ((kind, body) : mt) : CST.function_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_field_declarator (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_list ((kind, body) : mt) : CST.initializer_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Init_pair (
                            trans_initializer_pair (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Init_list (
                            trans_initializer_list (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Init_pair (
                                      trans_initializer_pair (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Init_list (
                                      trans_initializer_list (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_pair ((kind, body) : mt) : CST.initializer_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Subs_desi (
                      trans_subscript_designator (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Field_desi (
                      trans_field_designator (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_macro_type_specifier ((kind, body) : mt) : CST.macro_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_descriptor (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ms_based_modifier ((kind, body) : mt) : CST.ms_based_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_declaration ((kind, body) : mt) : CST.parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Decl (
                      trans_declarator (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Abst_decl (
                      trans_abstract_declarator (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_list ((kind, body) : mt) : CST.parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Param_decl (
                            trans_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `DOTDOTDOT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Param_decl (
                                      trans_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `DOTDOTDOT (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_declarator ((kind, body) : mt) : CST.parenthesized_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comma_exp (
                  trans_comma_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_field_declarator ((kind, body) : mt) : CST.parenthesized_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_declarator ((kind, body) : mt) : CST.pointer_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_expression ((kind, body) : mt) : CST.pointer_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_field_declarator ((kind, body) : mt) : CST.pointer_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_field_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif_in_field_declaration_list ((kind, body) : mt) : CST.preproc_elif_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else_in_field_declaration_list ((kind, body) : mt) : CST.preproc_else_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if_in_field_declaration_list ((kind, body) : mt) : CST.preproc_if_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef_in_field_declaration_list ((kind, body) : mt) : CST.preproc_ifdef_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sizeof_expression ((kind, body) : mt) : CST.sizeof_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_type_desc_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_type_descriptor (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_specifier ((kind, body) : mt) : CST.struct_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_ms_declspec_modifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id_opt_field_decl_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            trans_field_declaration_list (Run.matcher_token v)
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Field_decl_list (
                  trans_field_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_designator ((kind, body) : mt) : CST.subscript_designator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_descriptor ((kind, body) : mt) : CST.type_descriptor =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v0
            ,
            trans_type_specifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_specifier ((kind, body) : mt) : CST.type_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Struct_spec (
            trans_struct_specifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Union_spec (
            trans_union_specifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Enum_spec (
            trans_enum_specifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Macro_type_spec (
            trans_macro_type_specifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Sized_type_spec (
            trans_sized_type_specifier (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prim_type (
            trans_primitive_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_union_specifier ((kind, body) : mt) : CST.union_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_ms_declspec_modifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id_opt_field_decl_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            trans_field_declaration_list (Run.matcher_token v)
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Field_decl_list (
                  trans_field_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_DASHDASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_choice_DASHDASH (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_array_type_declarator ((kind, body) : mt) : CST.array_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type_declarator ((kind, body) : mt) : CST.function_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type_declarator ((kind, body) : mt) : CST.parenthesized_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_type_declarator ((kind, body) : mt) : CST.pointer_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_type_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_declarator ((kind, body) : mt) : CST.type_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Poin_type_decl (
            trans_pointer_type_declarator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_type_decl (
            trans_function_type_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Array_type_decl (
            trans_array_type_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Paren_type_decl (
            trans_parenthesized_type_declarator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_init_declarator ((kind, body) : mt) : CST.init_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_empty_declaration ((kind, body) : mt) : CST.empty_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_specifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_type_definition ((kind, body) : mt) : CST.type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v1
            ,
            trans_type_specifier (Run.matcher_token v2),
            trans_type_declarator (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Decl (
                  trans_declarator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Init_decl (
                  trans_init_declarator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Decl (
                            trans_declarator (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Init_decl (
                            trans_init_declarator (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_case_statement ((kind, body) : mt) : CST.case_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Case_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Defa (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_labe_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Labe_stmt (
                            trans_labeled_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Exp_stmt (
                            trans_expression_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Switch_stmt (
                            trans_switch_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Do_stmt (
                            trans_do_statement (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `While_stmt (
                            trans_while_statement (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `For_stmt (
                            trans_for_statement (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Ret_stmt (
                            trans_return_statement (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Brk_stmt (
                            trans_break_statement (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Cont_stmt (
                            trans_continue_statement (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Goto_stmt (
                            trans_goto_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_statement ((kind, body) : mt) : CST.compound_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_list ((kind, body) : mt) : CST.declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_labe_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Labe_stmt (
                        trans_labeled_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_choice_exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comma_exp (
                                  trans_comma_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6),
            (match v7 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_labe_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Labe_stmt (
                        trans_labeled_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_ms_call_modifier (Run.matcher_token v))
              v0
            ,
            trans_declaration_specifiers (Run.matcher_token v1),
            trans_declarator (Run.matcher_token v2),
            trans_compound_statement (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_labe_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Labe_stmt (
                        trans_labeled_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_labe_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Labe_stmt (
                        trans_labeled_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_linkage_specification ((kind, body) : mt) : CST.linkage_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_literal (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Decl_list (
                  trans_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif ((kind, body) : mt) : CST.preproc_elif =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else ((kind, body) : mt) : CST.preproc_else =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if ((kind, body) : mt) : CST.preproc_if =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef ((kind, body) : mt) : CST.preproc_ifdef =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Case_stmt (
                            trans_case_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_labe_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_compound_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_labe_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Labe_stmt (
                        trans_labeled_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_stmt (
                        trans_expression_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `If_stmt (
                        trans_if_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Switch_stmt (
                        trans_switch_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Do_stmt (
                        trans_do_statement (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_stmt (
                        trans_while_statement (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `For_stmt (
                        trans_for_statement (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Ret_stmt (
                        trans_return_statement (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Brk_stmt (
                        trans_break_statement (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Cont_stmt (
                        trans_continue_statement (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Goto_stmt (
                        trans_goto_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_translation_unit ((kind, body) : mt) : CST.translation_unit =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Func_defi (
                trans_function_definition (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Link_spec (
                trans_linkage_specification (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Decl (
                trans_declaration (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Choice_case_stmt (
                (match v with
                | Alt (0, v) ->
                    `Case_stmt (
                      trans_case_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Choice_labe_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Labe_stmt (
                            trans_labeled_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Exp_stmt (
                            trans_expression_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Switch_stmt (
                            trans_switch_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Do_stmt (
                            trans_do_statement (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `While_stmt (
                            trans_while_statement (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `For_stmt (
                            trans_for_statement (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Ret_stmt (
                            trans_return_statement (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Brk_stmt (
                            trans_break_statement (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Cont_stmt (
                            trans_continue_statement (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Goto_stmt (
                            trans_goto_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
          | Alt (4, v) ->
              `Type_defi (
                trans_type_definition (Run.matcher_token v)
              )
          | Alt (5, v) ->
              `Empty_decl (
                trans_empty_declaration (Run.matcher_token v)
              )
          | Alt (6, v) ->
              `Prep_if (
                trans_preproc_if (Run.matcher_token v)
              )
          | Alt (7, v) ->
              `Prep_ifdef (
                trans_preproc_ifdef (Run.matcher_token v)
              )
          | Alt (8, v) ->
              `Prep_incl (
                trans_preproc_include (Run.matcher_token v)
              )
          | Alt (9, v) ->
              `Prep_def (
                trans_preproc_def (Run.matcher_token v)
              )
          | Alt (10, v) ->
              `Prep_func_def (
                trans_preproc_function_def (Run.matcher_token v)
              )
          | Alt (11, v) ->
              `Prep_call (
                trans_preproc_call (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false


let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_translation_unit matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

